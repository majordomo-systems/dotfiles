# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Source profile and zsh-vi-mode if running on Ubuntu
if [ -f /etc/os-release ]; then
    os_name=$(grep '^NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '"')
    if [ "$os_name" = "Ubuntu" ]; then
        source ~/.profile
        source /nix/store/*zsh-vi-mode*/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
    fi
fi

# --- setup fzf ---
# fzf key bindings and fuzzy completion
eval "$(fzf --zsh)"

# --- setup fzf theme --- https://github.com/catppuccin/fzf
export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#b4befe,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--color=selected-bg:#45475a \
--multi \
--height 40% \
--layout=reverse"

# Starship initialization
eval "$(starship init zsh)"

# Zoxide initialization
eval "$(zoxide init zsh)"

# Tmuxifier - https://github.com/jimeh/tmuxifier
# 1) Clone tmuxifier repo to $HOME
# git clone https://github.com/jimeh/tmuxifier.git ~/.tmuxifier
# 2) Add $HOME/.tmuxifier/bin to your PATH then initialize
# export PATH="$HOME/.tmuxifier/bin:$PATH"
# eval "$(tmuxifier init -)"

# Bindings
bindkey "\e[A" history-search-backward
bindkey "\e[B" history-search-forward
bindkey "\e[C" forward-char
bindkey "\e[D" backward-char
bindkey '^f' autosuggest-accept

# Alias
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias c="clear"
alias e="exit"
alias t="tmux"
alias tn="(){ tmux new -s \$1 }"
alias p="pnpm"
alias l="ls -laF"                     # List in long format, include dotfiles
alias ls="ls -laF --color=auto"       # List in long format, include dotfiles
alias ld="ls -ld */"                  # List in long format, only directories
alias nnn='nnn -de'
alias n="nvim"
alias nv="nvim"
alias pico='nvim'
alias nano='nvim'
alias lzd='lazydocker'
alias fzf='fzf --preview="bat --color=always {}"'
# Open multiple files in VSCode/NeoVim [Tab to select, ENTER to open in VSCode]
alias cfzf='code $(fzf -m --preview="bat --color=always {}")'
alias nfzf='nvim $(fzf -m --preview="bat --color=always {}")'

# Rebuild
if [ -f /etc/os-release ]; then
os_name=$(grep '^NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '"')
if [ "$os_name" = "NixOS" ]; then
    alias rebuild='sudo nixos-rebuild switch'
elif [ "$os_name" = "Ubuntu" ]; then
    alias rebuild='nix flake update --flake ~/.config/nix/flake.nix && nix build .#homeConfigurations.administrator.activationPackage && nix run .#homeConfigurations.administrator.activationPackage && sudo apt -y update && sudo apt -y upgrade'
fi
elif [ "$(uname)" = "Darwin" ]; then
alias rebuild='cp ~/.config/nix-flakes/system/macos/flake.nix ~/.config/nix/flake.nix && darwin-rebuild switch --flake ~/.config/nix/'
else
alias rebuild='echo "Unsupported operating system for rebuild"'
fi

# Upgrade
if [ -f /etc/os-release ]; then
os_name=$(grep '^NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '"')
if [ "$os_name" = "NixOS" ]; then
    alias upgrade='sudo nix-channel --update && sudo nixos-rebuild switch --upgrade'
elif [ "$os_name" = "Ubuntu" ]; then
    alias upgrade='nix flake update --flake ~/.config/nix/flake.nix && nix build .#homeConfigurations.administrator.activationPackage && nix run .#homeConfigurations.administrator.activationPackage && sudo apt -y update && sudo apt -y upgrade'
fi
elif [ "$(uname)" = "Darwin" ]; then
alias upgrade='nix-channel --update && cp ~/.config/nix-flakes/system/macos/flake.nix ~/.config/nix/flake.nix && darwin-rebuild switch --flake ~/.config/nix/'
else
alias upgrade='echo "Unsupported operating system for upgrade"'
fi

# Cleanup
if [ -f /etc/os-release ]; then
os_name=$(grep '^NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '"')
if [ "$os_name" = "NixOS" ]; then
    alias cleanup='sudo nix-collect-garbage --delete-older-than 1d && sudo nix-collect-garbage -d && sudo rm -rf /nix/var/nix/gcroots/auto/* && nix-env --delete-generations old && nix-store --optimise && sudo nixos-rebuild boot'
elif [ "$os_name" = "Ubuntu" ]; then
    alias cleanup='nix-store --gc && nix-env --delete-generations old && sudo nix-collect-garbage --delete-old && sudo nix-collect-garbage && sudo rm -rf /nix/var/log/* && find /nix/store -xtype l -delete && nix-store --optimise && sudo apt-get clean && sudo apt-get autoremove && sudo apt-get --purge autoremove && sudo apt-get remove --purge $(deborphan) && sudo journalctl --vacuum-time=2weeks && rm -rf ~/.cache/thumbnails/*'
fi
elif [ "$(uname)" = "Darwin" ]; then
alias cleanup='nix-collect-garbage && nix-store --gc && rm -rf ~/.cache/nix/'
else
alias cleanup='echo "Unsupported operating system for cleanup"'
fi

# Digital Ocean Droplet Aliases
alias dropdev="create-dev.sh"
alias dropvpn="create-vpn.sh"
alias droplet="create-droplet.sh"
alias vpndelete="delete-vpn.sh"
alias dropdelete="delete-droplets.sh"

# Git Aliases
alias gs='git status -s'
alias ga='git add .'
alias gb='git branch'
alias gc='git commit'
alias gd='git diff'
alias go='git checkout'
alias gk='gitk --all&'
alias gx='gitx --all'

# SSH Agent
# if [ -z "$SSH_AUTH_SOCK" ] ; then
    # eval `ssh-agent -s`
    # ssh-add ~/.ssh/<NAME OF YOUR PRIVATE KEY>
# fi
loadkey() {
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/"${1}_key"
}

# Flakes
copy_flake() {
  local flake_path=~/.config/nix-flakes/$1/flake.nix
  if [ -f "$flake_path" ]; then
    cp "$flake_path" ./flake.nix
    echo "Flake '$1' copied to the current directory as 'flake.nix'."
  else
    echo "Flake '$1' not found or does not contain a flake.nix file."
  fi
}

use_flake() {
  local flake_path=~/.config/nix-flakes/$1/flake.nix
  if [ -f "$flake_path" ]; then
    # Copy the flake.nix to the current directory
    cp "$flake_path" ./flake.nix
    echo "Flake '$1' copied to the current directory as 'flake.nix'."

    # Create or update .envrc with the flake.nix reference
    echo "use flake ./flake.nix" > .envrc
    echo ".envrc updated with 'use flake ./flake.nix'."

    # Allow direnv to load the environment
    direnv allow
    echo "direnv is now active for this flake."
  else
    echo "Flake '$1' not found or does not contain a flake.nix file."
  fi
}

flake_shell() {
  local flake_path=~/.config/nix-flakes/$1
  if [ -d "$flake_path" ] && [ -f "$flake_path/flake.nix" ]; then
    nix develop "$flake_path"
  else
    echo "Flake '$1' not found or does not contain a flake.nix file."
  fi
}

# Connections
alias sshmaster="ssh admin@192.168.1.226 -t zsh --login"
alias sshdev=""

# Development
alias pyenv="python3 -m venv venv && source venv/bin/activate"

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.zsh_aliases ]; then
    . ~/.zsh_aliases
fi

# History settings
export HISTSIZE=100000
export HISTFILE="$HOME/.history"
export HISTFILESIZE=2000
export SAVEHIST=$HISTSIZE
HISTTIMEFORMAT="%Y-%m-%d %T "
HISTCONTROL=ignoreboth

